#include<bits/stdc++.h>

using namespace std;

void dfs(vector<pair<int,int>>adj[], int i, vector<bool> &visited, stack<int> &s){
    
    visited[i]=true;
    for(auto j : adj[i]){
        if(!visited[j.first]){
            dfs(adj,j.first, visited,s);
        }    
    }
    s.push(i);
}
int main(){
    int n,e;
    cin>>n>>e;
    vector<pair<int,int>> adj[n];
    
    for(int i=0;i<e;i++){
        int a,b,w;
        cin>>a>>b>>w;
        adj[a].push_back({b,w});
    }
    
    stack<int>s;
    vector<bool> visited(n,false);
    
    for(int i=0;i<n;i++){
        if(!visited[i]){
            dfs(adj,i,visited,s);
        }    
    }
    vector<int> dist(n,INT_MAX);
    dist[0]=0;
    
    while(!s.empty()){
        int curr = s.top();
        s.pop();
        
        for(auto temp: adj[curr]){
            if(dist[temp.first] > dist[curr] + temp.second){
                dist[temp.first] = dist[curr] + temp.second;
            }
        }
    }
    for (int i = 0; i < n; i++) 
        (dist[i] == INT_MAX)? cout << "INF ": cout << dist[i] << " ";
    
}